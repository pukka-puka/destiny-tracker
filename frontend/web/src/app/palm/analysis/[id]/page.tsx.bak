// src/app/palm/analysis/[id]/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { 
  ArrowLeft, 
  Heart, 
  Briefcase, 
  DollarSign, 
  Activity, 
  Users, 
  TrendingUp,
  Sparkles,
  Star,
  AlertCircle
} from 'lucide-react';
import { palmService, type PalmAnalysis } from '@/lib/services/palm.service';
import { useAuth } from '@/contexts/AuthContext';

export default function PalmAnalysisPage() {
  const params = useParams();
  const router = useRouter();
  const { user } = useAuth();
  const [analysis, setAnalysis] = useState<PalmAnalysis | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'overview' | 'lines' | 'advice'>('overview');

  useEffect(() => {
    if (user && params.id) {
      loadAnalysis();
    }
  }, [user, params.id]);

  const loadAnalysis = async () => {
    try {
      setLoading(true);
      const result = await palmService.getPalmReading(params.id as string);
      setAnalysis(result);
    } catch (error) {
      console.error('Failed to load analysis:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600"></div>
      </div>
    );
  }

  if (!analysis) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600 mb-4">鑑定結果が見つかりません</p>
          <button
            onClick={() => router.push('/palm')}
            className="text-purple-600 hover:text-purple-700"
          >
            手相占いに戻る
          </button>
        </div>
      </div>
    );
  }

  const parameterIcons = {
    love: Heart,
    career: Briefcase,
    money: DollarSign,
    health: Activity,
    social: Users,
    growth: TrendingUp,
  };

  const parameterLabels = {
    love: '恋愛運',
    career: '仕事運',
    money: '金運',
    health: '健康運',
    social: '対人運',
    growth: '成長運',
  };

  const lineLabels = {
    lifeLine: '生命線',
    headLine: '頭脳線',
    heartLine: '感情線',
    fateLine: '運命線',
    sunLine: '太陽線',
    marriageLine: '結婚線',
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-purple-50 via-pink-50 to-white">
      <div className="container mx-auto px-4 py-8">
        {/* ヘッダー */}
        <div className="mb-8">
          <button
            onClick={() => router.push('/palm')}
            className="flex items-center text-purple-600 hover:text-purple-700 mb-4"
          >
            <ArrowLeft className="w-5 h-5 mr-2" />
            手相占いに戻る
          </button>
          <h1 className="text-3xl font-bold text-gray-800">手相鑑定結果</h1>
        </div>

        {/* メイン内容 */}
        <div className="max-w-6xl mx-auto">
          <div className="grid lg:grid-cols-3 gap-8">
            {/* 左側：画像と概要 */}
            <div className="lg:col-span-1">
              {analysis.imageUrl && (
                <div className="bg-white rounded-2xl shadow-xl p-6 mb-6">
                  <img
                    src={analysis.imageUrl}
                    alt="手相"
                    className="w-full rounded-xl"
                  />
                </div>
              )}
              
              {/* サマリー */}
              <div className="bg-white rounded-2xl shadow-xl p-6">
                <h2 className="text-xl font-semibold text-gray-800 mb-4">鑑定サマリー</h2>
                <p className="text-gray-700 leading-relaxed">
                  {analysis.summary}
                </p>
              </div>
            </div>

            {/* 右側：詳細情報 */}
            <div className="lg:col-span-2">
              {/* タブナビゲーション */}
              <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
                <div className="flex border-b">
                  <button
                    onClick={() => setActiveTab('overview')}
                    className={`flex-1 py-4 px-6 font-medium transition-colors ${
                      activeTab === 'overview'
                        ? 'bg-purple-50 text-purple-600 border-b-2 border-purple-600'
                        : 'text-gray-600 hover:bg-gray-50'
                    }`}
                  >
                    総合鑑定
                  </button>
                  <button
                    onClick={() => setActiveTab('lines')}
                    className={`flex-1 py-4 px-6 font-medium transition-colors ${
                      activeTab === 'lines'
                        ? 'bg-purple-50 text-purple-600 border-b-2 border-purple-600'
                        : 'text-gray-600 hover:bg-gray-50'
                    }`}
                  >
                    手相の線
                  </button>
                  <button
                    onClick={() => setActiveTab('advice')}
                    className={`flex-1 py-4 px-6 font-medium transition-colors ${
                      activeTab === 'advice'
                        ? 'bg-purple-50 text-purple-600 border-b-2 border-purple-600'
                        : 'text-gray-600 hover:bg-gray-50'
                    }`}
                  >
                    アドバイス
                  </button>
                </div>

                <div className="p-8">
                  {/* 総合鑑定タブ */}
                  {activeTab === 'overview' && (
                    <div className="space-y-8">
                      {/* 詳細な解釈 */}
                      <div>
                        <h3 className="text-xl font-semibold text-gray-800 mb-4">詳細鑑定</h3>
                        <div className="prose prose-purple max-w-none">
                          <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                            {analysis.interpretation}
                          </p>
                        </div>
                      </div>

                      {/* パラメーター */}
                      <div>
                        <h3 className="text-xl font-semibold text-gray-800 mb-4">運勢パラメーター</h3>
                        <div className="grid grid-cols-2 gap-4">
                          {Object.entries(analysis.parameters).map(([key, value]) => {
                            const Icon = parameterIcons[key as keyof typeof parameterIcons];
                            return (
                              <div key={key} className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl p-4">
                                <div className="flex items-center justify-between mb-2">
                                  <div className="flex items-center">
                                    <Icon className="w-5 h-5 text-purple-600 mr-2" />
                                    <span className="font-medium text-gray-700">
                                      {parameterLabels[key as keyof typeof parameterLabels]}
                                    </span>
                                  </div>
                                  <span className="text-2xl font-bold text-purple-600">
                                    {value}
                                  </span>
                                </div>
                                <div className="w-full bg-gray-200 rounded-full h-2">
                                  <div
                                    className="bg-gradient-to-r from-purple-500 to-pink-500 h-2 rounded-full"
                                    style={{ width: `${value}%` }}
                                  />
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    </div>
                  )}

                  {/* 手相の線タブ */}
                  {activeTab === 'lines' && (
                    <div className="space-y-6">
                      <h3 className="text-xl font-semibold text-gray-800 mb-4">手相の線の詳細</h3>
                      {Object.entries(analysis.lines).map(([key, value]) => {
                        if (!value) return null;
                        return (
                          <div key={key} className="border-l-4 border-purple-500 pl-4">
                            <h4 className="font-semibold text-gray-800 mb-2">
                              {lineLabels[key as keyof typeof lineLabels]}
                            </h4>
                            <p className="text-gray-700">{value}</p>
                          </div>
                        );
                      })}
                    </div>
                  )}

                  {/* アドバイスタブ */}
                  {activeTab === 'advice' && (
                    <div className="space-y-8">
                      {/* 強み */}
                      <div>
                        <h3 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                          <Star className="w-6 h-6 text-yellow-500 mr-2" />
                          あなたの強み
                        </h3>
                        <div className="space-y-3">
                          {analysis.advice.strength.map((item, index) => (
                            <div key={index} className="bg-yellow-50 border border-yellow-200 rounded-xl p-4">
                              <p className="text-gray-700">{item}</p>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* チャンス */}
                      <div>
                        <h3 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                          <Sparkles className="w-6 h-6 text-green-500 mr-2" />
                          今後のチャンス
                        </h3>
                        <div className="space-y-3">
                          {analysis.advice.opportunity.map((item, index) => (
                            <div key={index} className="bg-green-50 border border-green-200 rounded-xl p-4">
                              <p className="text-gray-700">{item}</p>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* 注意点 */}
                      <div>
                        <h3 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                          <AlertCircle className="w-6 h-6 text-amber-500 mr-2" />
                          注意すべき点
                        </h3>
                        <div className="space-y-3">
                          {analysis.advice.caution.map((item, index) => (
                            <div key={index} className="bg-amber-50 border border-amber-200 rounded-xl p-4">
                              <p className="text-gray-700">{item}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* ラッキーアイテム */}
              <div className="bg-gradient-to-r from-purple-600 to-pink-600 rounded-2xl shadow-xl p-6 mt-8 text-white">
                <h3 className="text-xl font-semibold mb-4">🌟 今後の開運ポイント</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-purple-100 text-sm mb-1">ラッキーカラー</p>
                    <p className="text-xl font-bold">{analysis.fortune.luckyColor}</p>
                  </div>
                  <div>
                    <p className="text-purple-100 text-sm mb-1">ラッキーナンバー</p>
                    <p className="text-xl font-bold">{analysis.fortune.luckyNumber}</p>
                  </div>
                  <div className="col-span-2">
                    <p className="text-purple-100 text-sm mb-1">ラッキーアイテム</p>
                    <p className="text-xl font-bold">{analysis.fortune.luckyItem}</p>
                  </div>
                  <div className="col-span-2 mt-4">
                    <p className="text-purple-100 text-sm mb-2">総合メッセージ</p>
                    <p className="leading-relaxed">{analysis.fortune.overall}</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
