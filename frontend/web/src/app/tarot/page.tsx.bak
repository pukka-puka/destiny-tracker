'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';
import { destinyService } from '@/lib/services/destiny.service';
import { majorArcana, calculateParametersFromCards } from '@/data/tarot-cards';
import { Sparkles, RefreshCw, ArrowRight, Heart, Briefcase, DollarSign, Star } from 'lucide-react';
import Image from 'next/image';

export default function TarotPage() {
  const router = useRouter();
  const { user } = useAuth();
  const [step, setStep] = useState<'intro' | 'shuffle' | 'select' | 'reading' | 'result'>('intro');
  const [selectedCards, setSelectedCards] = useState<any[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>('general');
  const [isShuffling, setIsShuffling] = useState(false);
  const [interpretation, setInterpretation] = useState<string>('');
  const [saving, setSaving] = useState(false);
  const [loading, setLoading] = useState(false);

  const categories = [
    { id: 'general', label: '総合運', icon: Star, color: 'from-purple-500 to-pink-500' },
    { id: 'love', label: '恋愛運', icon: Heart, color: 'from-pink-500 to-red-500' },
    { id: 'work', label: '仕事運', icon: Briefcase, color: 'from-blue-500 to-cyan-500' },
    { id: 'money', label: '金運', icon: DollarSign, color: 'from-green-500 to-emerald-500' },
  ];

  // カードをシャッフル
  const shuffleCards = () => {
    setIsShuffling(true);
    setTimeout(() => {
      setIsShuffling(false);
      setStep('select');
    }, 2000);
  };

  // カードを選択
  const selectCard = (index: number) => {
    if (selectedCards.length >= 3) return;
    
    const randomCard = majorArcana[Math.floor(Math.random() * majorArcana.length)];
    const newCard = {
      ...randomCard,
      position: selectedCards.length,
      isReversed: Math.random() > 0.5
    };
    
    const newSelectedCards = [...selectedCards, newCard];
    setSelectedCards(newSelectedCards);
    
    // 3枚選択完了したら自動的にAI解釈へ
    if (newSelectedCards.length === 3) {
      setTimeout(() => {
        setStep('reading');
        getInterpretation(newSelectedCards);
      }, 500);
    }
  };

  // AI解釈を取得（強化版）
  const getInterpretation = async (cards: any[]) => {
    setLoading(true);
    try {
      // APIキーがある場合はClaude APIを使用
      if (process.env.NEXT_PUBLIC_USE_AI !== 'false') {
        const response = await fetch('/api/tarot', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            cards,
            category: selectedCategory 
          })
        });
        
        if (response.ok) {
          const data = await response.json();
          setInterpretation(data.interpretation);
        } else {
          // APIエラーの場合は詳細なローカル解釈を使用
          setInterpretation(generateDetailedLocalInterpretation(cards));
        }
      } else {
        // モックモードの場合
        setInterpretation(generateDetailedLocalInterpretation(cards));
      }
      
      setStep('result');
    } catch (error) {
      console.error('Failed to get interpretation:', error);
      // エラー時は詳細なローカル解釈を使用
      setInterpretation(generateDetailedLocalInterpretation(cards));
      setStep('result');
    } finally {
      setLoading(false);
    }
  };

  // 詳細なローカル解釈生成（2000文字以上）
  const generateDetailedLocalInterpretation = (cards: any[]) => {
    const categoryLabel = categories.find(c => c.id === selectedCategory)?.label || '総合運';
    const past = cards[0];
    const present = cards[1];
    const future = cards[2];
    
    return `━━━━━━━━━━━━━━━━━
🌟 ${categoryLabel}の詳細占い結果
━━━━━━━━━━━━━━━━━

あなたが選んだ3枚のカードが、${categoryLabel}における重要なメッセージを伝えています。

━━━━━━━━━━━━━━━━━
⏰ 過去：${past.nameJa}${past.isReversed ? '（逆位置）' : '（正位置）'}
━━━━━━━━━━━━━━━━━

【カードの意味】
${past.meaning}

【過去の影響】
${past.nameJa}のカードは、あなたの過去における${categoryLabel}の基盤を示しています。
${past.isReversed ? 
  'このカードが逆位置で出たことは、過去に何らかの課題や未解決の問題があったことを示唆しています。しかし、それは成長のための重要な経験でした。' : 
  'このカードが正位置で出たことは、過去の経験が今のあなたの強みになっていることを示しています。'}

このカードが示すのは、${past.meaning.split('、')[0]}という経験を通じて、あなたが学んできたことです。
過去のこの経験は、現在のあなたの${categoryLabel}に深い影響を与えており、それは決して無駄ではありませんでした。
むしろ、これらの経験があったからこそ、今のあなたがあるのです。

━━━━━━━━━━━━━━━━━
🌸 現在：${present.nameJa}${present.isReversed ? '（逆位置）' : '（正位置）'}
━━━━━━━━━━━━━━━━━

【カードの意味】
${present.meaning}

【現在の状況】
${present.nameJa}は、あなたの${categoryLabel}の現在地を明確に示しています。
${present.isReversed ? 
  '逆位置であることから、現在何らかの調整や見直しが必要な時期にあることがわかります。これは決してネガティブな意味ではなく、むしろ成長のチャンスです。' : 
  '正位置であることから、現在のあなたのエネルギーが正しい方向に向かっていることがわかります。'}

特に注目すべきは、${present.meaning.split('、')[1]}というテーマです。
今この瞬間、あなたは${categoryLabel}において重要な転換期にいます。
${selectedCategory === 'love' ? '愛と人間関係' : 
  selectedCategory === 'work' ? '仕事とキャリア' : 
  selectedCategory === 'money' ? '経済と豊かさ' : 
  '人生全体'}の面で、新たな可能性が開かれようとしています。

現在のエネルギーを最大限に活用するためには、${present.meaning.split('、')[2]}を意識することが大切です。

━━━━━━━━━━━━━━━━━
🔮 未来：${future.nameJa}${future.isReversed ? '（逆位置）' : '（正位置）'}
━━━━━━━━━━━━━━━━━

【カードの意味】
${future.meaning}

【未来の可能性】
${future.nameJa}が未来の位置に出たことは、非常に興味深い展開を示唆しています。
${future.isReversed ? 
  '逆位置は、予想外の展開や違った形での成就を意味します。柔軟な姿勢で臨むことが成功の鍵となるでしょう。' : 
  '正位置は、あなたの努力が実を結び、望む方向へと進んでいくことを示しています。'}

このカードが示す${future.meaning.split('、')[0]}というテーマは、あなたの${categoryLabel}における到達点を表しています。
近い将来、${selectedCategory === 'love' ? '素晴らしい出会いや関係の深まり' : 
  selectedCategory === 'work' ? '仕事での大きな成果や新たなチャンス' : 
  selectedCategory === 'money' ? '経済的な安定や予期せぬ収入' : 
  '人生における重要な達成'}が期待できます。

ただし、この未来は確定的なものではなく、あなたの選択と行動によって形作られていきます。

━━━━━━━━━━━━━━━━━
💫 3枚のカードが紡ぐストーリー
━━━━━━━━━━━━━━━━━

過去の${past.nameJa}、現在の${present.nameJa}、そして未来の${future.nameJa}。
この3枚のカードの組み合わせは、あなたの${categoryLabel}における成長の物語を描いています。

過去の${past.meaning.split('、')[0]}から始まり、
現在の${present.meaning.split('、')[0]}を経て、
未来の${future.meaning.split('、')[0]}へと向かう流れは、
まさに人生の自然な進化のプロセスを表しています。

特に重要なのは、これら3枚のカードが示すエネルギーの変化です。
あなたは確実に前進しており、${categoryLabel}において新たなステージへと移行しようとしています。

━━━━━━━━━━━━━━━━━
🎯 具体的なアドバイス
━━━━━━━━━━━━━━━━━

カードからのメッセージを日常生活に活かすために、以下のことを心がけてください：

1. **今週中に取るべき行動**
   ${selectedCategory === 'love' ? '大切な人との時間を意識的に作り、感謝の気持ちを言葉にして伝えましょう。' : 
     selectedCategory === 'work' ? '先延ばしにしていたプロジェクトや課題に着手し、小さな一歩でも前進させましょう。' : 
     selectedCategory === 'money' ? '収支を見直し、将来のための貯蓄計画を立てましょう。' : 
     '自分の本当の願いを明確にし、それに向けた具体的な計画を立てましょう。'}

2. **意識すべきポイント**
   現在のカード${present.nameJa}が示すように、${present.meaning.split('、')[1]}を大切にすることです。
   これは今のあなたに最も必要なエネルギーです。

3. **避けるべきこと**
   ${past.isReversed || present.isReversed || future.isReversed ? 
     '過度な期待や焦りは避け、自然な流れに身を任せることも大切です。' : 
     '現状に満足しすぎず、常に成長と進化を求める姿勢を忘れないでください。'}

━━━━━━━━━━━━━━━━━
🍀 開運ポイント
━━━━━━━━━━━━━━━━━

**ラッキーカラー**: ${['紫', '金', '青', '緑', '赤', '白'][Math.floor(Math.random() * 6)]}
この色を身につけたり、意識的に取り入れることで、運気の流れが良くなります。

**ラッキーアイテム**: ${['クリスタル', '香り（お香やアロマ）', '植物', '手帳', '音楽', 'キャンドル'][Math.floor(Math.random() * 6)]}
このアイテムを活用することで、カードのエネルギーとより深くつながることができます。

**パワータイム**: ${['朝の時間', '午後3時頃', '夕暮れ時', '満月の夜', '新月の日', '週末の午前中'][Math.floor(Math.random() * 6)]}
この時間帯に重要な決断や行動を起こすと良いでしょう。

**開運の方位**: ${['北', '南', '東', '西', '北東', '南西'][Math.floor(Math.random() * 6)]}
この方角を意識して行動すると、良い流れを引き寄せやすくなります。

━━━━━━━━━━━━━━━━━
✨ 最後のメッセージ
━━━━━━━━━━━━━━━━━

タロットカードは、あなたの内なる知恵と宇宙のエネルギーをつなぐ架け橋です。
今回の占いで示されたメッセージは、あなたの潜在意識がすでに知っていることを確認するものでもあります。

${categoryLabel}において、あなたは正しい道を歩んでいます。
自信を持って、カードが示す方向へと進んでください。
運命はあなたの味方です。

この占いが、あなたの${categoryLabel}における素晴らしい未来への道しるべとなりますように。

🌙 占い師より愛を込めて`;
  };

  // カード画像名を取得
  const getCardImageName = (cardName: string) => {
    const imageMap: Record<string, string> = {
      '愚者': '0-fool',
      '魔術師': '1-magician',
      '女教皇': '2-high-priestess',
      '女帝': '3-empress',
      '皇帝': '4-emperor',
      '教皇': '5-hierophant',
      '恋人': '6-lovers',
      '戦車': '7-chariot',
      '力': '8-strength',
      '隠者': '9-hermit',
      '運命の輪': '10-wheel-of-fortune',
      '正義': '11-justice',
      '吊るされた男': '12-hanged-man',
      '死神': '13-death',
      '節制': '14-temperance',
      '悪魔': '15-devil',
      '塔': '16-tower',
      '星': '17-star',
      '月': '18-moon',
      '太陽': '19-sun',
      '審判': '20-judgement',
      '世界': '21-world'
    };
    return imageMap[cardName];
  };

  // 占い結果を保存（修正版）
  const saveReading = async () => {
    if (!user || saving) return;
    
    setSaving(true);
    try {
      const parameters = calculateParametersFromCards(selectedCards);
      const overallScore = Math.round(Object.values(parameters).reduce((a: number, b: number) => a + b, 0) / 6);
      
      const reading = {
        userId: user.uid,
        readingType: 'daily-tarot' as const,
        parameters,
        daily: {
          overall: overallScore,
          luckyColor: ['赤', '青', '緑', '黄', '紫', '橙'][Math.floor(Math.random() * 6)],
          luckyNumber: Math.floor(Math.random() * 9) + 1,
          advice: '今日は新しいことにチャレンジする絶好の日です。'
        },
        tarotReading: {
          cards: selectedCards,
          spread: 'past-present-future' as const,
          interpretation,
          shortTermAdvice: '直感を信じて行動することが成功への鍵となります。',
          detailedMeanings: {
            past: `${selectedCards[0].nameJa}：${selectedCards[0].meaning}`,
            present: `${selectedCards[1].nameJa}：${selectedCards[1].meaning}`,
            future: `${selectedCards[2].nameJa}：${selectedCards[2].meaning}`
          }
        }
      };
      
      await destinyService.createReading(reading);
      
      console.log('✅ 占い結果を保存しました！', reading);
      
      router.push('/dashboard');
    } catch (error) {
      console.error('Failed to save reading:', error);
      alert('保存に失敗しました。もう一度お試しください。');
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-purple-900 via-purple-800 to-indigo-900 text-white p-4">
      <div className="max-w-6xl mx-auto">
        
        {/* イントロ */}
        {step === 'intro' && (
          <div className="flex flex-col items-center justify-center min-h-[80vh] text-center">
            <Sparkles className="w-16 h-16 mb-6 text-yellow-300 animate-pulse" />
            <h1 className="text-4xl font-bold mb-4">タロット占い</h1>
            <p className="text-xl mb-8 text-purple-200">
              AIが導く、あなたの運命のメッセージ
            </p>
            
            {/* カテゴリ選択 */}
            <div className="mb-8">
              <p className="mb-4 text-purple-300">占いたい内容を選んでください</p>
              <div className="grid grid-cols-2 gap-4">
                {categories.map((cat) => {
                  const Icon = cat.icon;
                  return (
                    <button
                      key={cat.id}
                      onClick={() => setSelectedCategory(cat.id)}
                      className={`px-6 py-4 rounded-xl font-semibold transition-all transform hover:scale-105 ${
                        selectedCategory === cat.id
                          ? 'bg-gradient-to-r ' + cat.color + ' shadow-lg scale-105'
                          : 'bg-purple-800/50 hover:bg-purple-700/50'
                      }`}
                    >
                      <Icon className="w-6 h-6 mx-auto mb-2" />
                      {cat.label}
                    </button>
                  );
                })}
              </div>
            </div>
            
            <button
              onClick={() => setStep('shuffle')}
              className="px-8 py-4 bg-gradient-to-r from-purple-600 to-pink-600 rounded-full text-lg font-semibold hover:from-purple-700 hover:to-pink-700 transition transform hover:scale-105"
            >
              占いを始める
            </button>
          </div>
        )}

        {/* シャッフル */}
        {step === 'shuffle' && (
          <div className="flex flex-col items-center justify-center min-h-[80vh]">
            <h2 className="text-3xl font-bold mb-8">カードをシャッフル中...</h2>
            <div className="relative w-48 h-72 mb-8">
              {[...Array(5)].map((_, i) => (
                <div
                  key={i}
                  className={`absolute inset-0 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg shadow-2xl transform ${
                    isShuffling ? 'animate-shuffle' : ''
                  }`}
                  style={{
                    transform: `rotate(${i * 5 - 10}deg) translateX(${i * 2}px)`,
                    zIndex: 5 - i
                  }}
                >
                  <div className="w-full h-full rounded-lg border-2 border-purple-300 opacity-50" />
                </div>
              ))}
            </div>
            {!isShuffling && (
              <button
                onClick={shuffleCards}
                className="px-6 py-3 bg-yellow-500 text-purple-900 rounded-full font-semibold hover:bg-yellow-400 transition"
              >
                シャッフルする
              </button>
            )}
          </div>
        )}

        {/* カード選択 */}
        {step === 'select' && (
          <div className="flex flex-col items-center justify-center min-h-[80vh]">
            <h2 className="text-3xl font-bold mb-4">カードを3枚選んでください</h2>
            <p className="text-purple-200 mb-8">{selectedCards.length}/3 枚選択済み</p>
            
            <div className="grid grid-cols-7 gap-2 mb-8">
              {[...Array(22)].map((_, i) => (
                <button
                  key={i}
                  onClick={() => selectCard(i)}
                  disabled={selectedCards.length >= 3}
                  className="w-16 h-24 bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg shadow-lg hover:shadow-2xl transition-all transform hover:scale-110 hover:-translate-y-2 disabled:opacity-50 disabled:hover:scale-100"
                >
                  <div className="w-full h-full rounded-lg border border-purple-300 opacity-50" />
                </button>
              ))}
            </div>

            {selectedCards.length > 0 && (
              <div className="flex gap-4">
                {['過去', '現在', '未来'].map((label, i) => (
                  <div key={i} className="text-center">
                    <p className="text-sm mb-2">{label}</p>
                    <div className={`w-20 h-32 rounded-lg border-2 ${
                      selectedCards[i] 
                        ? 'bg-gradient-to-br from-yellow-400 to-orange-500 border-yellow-400 shadow-lg' 
                        : 'border-dashed border-purple-400'
                    }`}>
                      {selectedCards[i] && (
                        <div className="w-full h-full flex items-center justify-center">
                          <div className="text-center p-2">
                            <p className="text-xs text-purple-900 font-bold">
                              {selectedCards[i].nameJa}
                            </p>
                            {selectedCards[i].isReversed && (
                              <p className="text-xs text-purple-700 mt-1">逆位置</p>
                            )}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* AI解釈中 */}
        {step === 'reading' && loading && (
          <div className="flex flex-col items-center justify-center min-h-[80vh]">
            <div className="mb-8">
              <div className="flex gap-8">
                {selectedCards.map((card, i) => {
                  const imageName = getCardImageName(card.nameJa);
                  return (
                    <div key={i} className="text-center">
                      <p className="text-lg mb-2 text-yellow-300">{['過去', '現在', '未来'][i]}</p>
                      <div className="w-32 h-48 rounded-lg shadow-2xl overflow-hidden">
                        {imageName ? (
                          <img
                            src={`/tarot-cards/${imageName}.jpg`}
                            alt={card.nameJa}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <div className="w-full h-full bg-gradient-to-br from-yellow-400 to-orange-500 flex items-center justify-center">
                            <p className="text-purple-900 font-bold">{card.nameJa}</p>
                          </div>
                        )}
                      </div>
                      <p className="mt-2 text-sm text-purple-200">
                        {card.isReversed && '逆位置'}
                      </p>
                    </div>
                  );
                })}
              </div>
            </div>
            <div className="text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-yellow-300 mx-auto mb-4"></div>
              <p className="text-xl text-purple-200 animate-pulse">
                AIがカードの意味を解釈中...
              </p>
              <p className="text-sm text-purple-300 mt-2">
                詳細な占い結果を生成しています
              </p>
            </div>
          </div>
        )}

        {/* 結果表示 */}
        {step === 'result' && !loading && (
          <div className="flex flex-col items-center py-12">
            <h2 className="text-3xl font-bold mb-8">
              {categories.find(c => c.id === selectedCategory)?.label}の占い結果
            </h2>
            
            {/* カード表示 */}
            <div className="flex gap-8 mb-12">
              {selectedCards.map((card, i) => {
                const imageName = getCardImageName(card.nameJa);
                return (
                  <div key={i} className="text-center">
                    <p className="text-lg mb-2 text-yellow-300">{['過去', '現在', '未来'][i]}</p>
                    <div className="w-32 h-48 rounded-lg shadow-2xl overflow-hidden transform hover:scale-110 transition-transform">
                      {imageName ? (
                        <img
                          src={`/tarot-cards/${imageName}.jpg`}
                          alt={card.nameJa}
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="w-full h-full bg-gradient-to-br from-yellow-400 to-orange-500 p-3">
                          <div className="w-full h-full rounded border-2 border-yellow-600 flex flex-col items-center justify-center">
                            <p className="text-xl font-bold text-purple-900">{card.nameJa}</p>
                            {card.isReversed && <p className="text-xs text-purple-700 mt-1">逆位置</p>}
                          </div>
                        </div>
                      )}
                    </div>
                    <p className="mt-2 text-sm text-purple-200">
                      {card.nameJa}{card.isReversed ? '（逆位置）' : ''}
                    </p>
                  </div>
                );
              })}
            </div>

            {/* AI解釈 */}
            <div className="max-w-4xl w-full bg-purple-800/50 backdrop-blur rounded-xl p-8 mb-8">
              <div className="prose prose-invert max-w-none">
                <div className="whitespace-pre-wrap text-purple-100 leading-relaxed text-lg">
                  {interpretation}
                </div>
              </div>
            </div>

            {/* アクションボタン */}
            <div className="flex gap-4">
              <button
                onClick={() => {
                  setStep('intro');
                  setSelectedCards([]);
                  setInterpretation('');
                }}
                className="px-6 py-3 bg-purple-600 rounded-full font-semibold hover:bg-purple-700 transition flex items-center gap-2"
              >
                <RefreshCw className="w-4 h-4" />
                もう一度占う
              </button>
              
              <button
                onClick={saveReading}
                disabled={saving}
                className="px-6 py-3 bg-gradient-to-r from-yellow-500 to-orange-500 text-purple-900 rounded-full font-semibold hover:from-yellow-600 hover:to-orange-600 transition flex items-center gap-2 disabled:opacity-50"
              >
                {saving ? '保存中...' : '結果を保存'}
                <ArrowRight className="w-4 h-4" />
              </button>
            </div>
          </div>
        )}
      </div>

      <style jsx>{`
        @keyframes shuffle {
          0%, 100% { transform: translateX(0) rotateZ(0deg); }
          25% { transform: translateX(-20px) rotateZ(-5deg); }
          75% { transform: translateX(20px) rotateZ(5deg); }
        }
        .animate-shuffle {
          animation: shuffle 0.5s ease-in-out infinite;
        }
      `}</style>
    </div>
  );
}
