// src/app/dashboard/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { destinyService } from '@/lib/services/destiny.service';
import { DestinyReading, UserStats } from '@/types/destiny.types';
import ParameterCard from '@/components/dashboard/ParameterCard';
import RadarChart from '@/components/dashboard/RadarChart';
import HistoryChart from '@/components/dashboard/HistoryChart';
import DailyFortune from '@/components/dashboard/DailyFortune';
import StatsCard from '@/components/dashboard/StatsCard';
import { Sparkles, Camera, Calendar, TrendingUp } from 'lucide-react';
import { useRouter } from 'next/navigation';

export default function DashboardPage() {
  const { user } = useAuth();
  const router = useRouter();
  const [todayReading, setTodayReading] = useState<DestinyReading | null>(null);
  const [lastPalmReading, setLastPalmReading] = useState<DestinyReading | null>(null);
  const [readingHistory, setReadingHistory] = useState<DestinyReading[]>([]);
  const [userStats, setUserStats] = useState<UserStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [canReadTarotToday, setCanReadTarotToday] = useState(true);
  const [canReadPalmThisMonth, setCanReadPalmThisMonth] = useState(true);

  useEffect(() => {
    if (user) {
      loadDashboardData();
    }
  }, [user]);

  const loadDashboardData = async () => {
    if (!user) return;

    setLoading(true);
    try {
      const [today, history, stats] = await Promise.all([
        destinyService.getTodayReading(user.uid),
        destinyService.getReadingHistory(user.uid, 30),
        destinyService.getUserStats(user.uid)
      ]);

      // 今日のタロット占いを確認
      const todayTarot = history.find(r => {
        const readingDate = new Date(r.createdAt);
        const today = new Date();
        return r.readingType === 'daily-tarot' &&
               readingDate.toDateString() === today.toDateString();
      });

      // 最新の手相占いを取得
      const palmReading = history.find(r => r.readingType === 'palm');

      // 今月の手相占いがあるか確認
      const thisMonth = new Date();
      const hasPalmThisMonth = history.some(r => {
        const readingDate = new Date(r.createdAt);
        return r.readingType === 'palm' &&
               readingDate.getMonth() === thisMonth.getMonth() &&
               readingDate.getFullYear() === thisMonth.getFullYear();
      });

      setTodayReading(todayTarot || today);
      setLastPalmReading(palmReading || null);
      setReadingHistory(history);
      setUserStats(stats);
      setCanReadTarotToday(!todayTarot);
      setCanReadPalmThisMonth(!hasPalmThisMonth);
    } catch (error) {
      console.error('Error loading dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleTarotReading = () => {
    router.push('/tarot');
  };

  const handlePalmReading = () => {
    router.push('/palm');
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[60vh]">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">運命を読み込み中...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* ヘッダー */}
      <div className="bg-gradient-to-r from-purple-600 to-pink-600 rounded-2xl p-8 text-white">
        <h1 className="text-3xl font-bold mb-2">
          運命ダッシュボード
        </h1>
        <p className="text-purple-100">
          {user?.displayName || user?.email}さんの運勢トラッカー
        </p>
      </div>

      {/* 占いボタン */}
      <div className="grid md:grid-cols-2 gap-6">
        {/* タロット占い（毎日） */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="flex items-start justify-between mb-4">
            <div>
              <h3 className="text-xl font-semibold flex items-center gap-2">
                <Sparkles className="w-5 h-5 text-yellow-500" />
                今日のタロット占い
              </h3>
              <p className="text-sm text-gray-500 mt-1">毎日の運勢をチェック</p>
            </div>
            <span className="text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded-full">
              毎日可能
            </span>
          </div>
          
          {canReadTarotToday ? (
            <button
              onClick={handleTarotReading}
              className="w-full py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:from-purple-700 hover:to-pink-700 transition"
            >
              タロットで占う
            </button>
          ) : (
            <div className="text-center py-3 bg-gray-100 rounded-lg">
              <p className="text-gray-600">本日の占い済み ✨</p>
              <p className="text-xs text-gray-400 mt-1">明日また占えます</p>
            </div>
          )}

          {todayReading?.tarotReading && (
            <div className="mt-4 p-3 bg-purple-50 rounded-lg">
              <p className="text-sm text-gray-700">
                {todayReading.tarotReading.shortTermAdvice}
              </p>
            </div>
          )}
        </div>

        {/* 手相占い（月1回） */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="flex items-start justify-between mb-4">
            <div>
              <h3 className="text-xl font-semibold flex items-center gap-2">
                <Camera className="w-5 h-5 text-indigo-500" />
                手相占い
              </h3>
              <p className="text-sm text-gray-500 mt-1">中長期の運勢傾向</p>
            </div>
            <span className="text-xs bg-indigo-100 text-indigo-700 px-2 py-1 rounded-full">
              月1回
            </span>
          </div>
          
          {canReadPalmThisMonth ? (
            <button
              onClick={handlePalmReading}
              className="w-full py-3 bg-gradient-to-r from-indigo-600 to-blue-600 text-white rounded-lg hover:from-indigo-700 hover:to-blue-700 transition"
            >
              手相で占う
            </button>
          ) : (
            <div className="text-center py-3 bg-gray-100 rounded-lg">
              <p className="text-gray-600">今月の占い済み 🖐️</p>
              <p className="text-xs text-gray-400 mt-1">来月また占えます</p>
            </div>
          )}

          {lastPalmReading?.palmReading && (
            <div className="mt-4 p-3 bg-indigo-50 rounded-lg">
              <p className="text-sm text-gray-700">
                基本性格：{lastPalmReading.palmReading.personalityTraits?.[0]}
              </p>
            </div>
          )}
        </div>
      </div>

      {/* 今日の運勢 */}
      {todayReading?.daily && (
        <DailyFortune fortune={todayReading.daily} />
      )}

      {/* パラメーターカード */}
      {todayReading && (
        <div>
          <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
            <TrendingUp className="w-5 h-5" />
            今日のパラメーター
          </h2>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
            {Object.entries(todayReading.parameters).map(([key, value]) => (
              <ParameterCard
                key={key}
                parameter={key as keyof typeof todayReading.parameters}
                value={value}
              />
            ))}
          </div>
        </div>
      )}

      {/* チャートセクション */}
      <div className="grid md:grid-cols-2 gap-6">
        {/* レーダーチャート */}
        {todayReading && (
          <div className="bg-white rounded-xl p-6 shadow-lg">
            <h2 className="text-xl font-semibold mb-4">運勢バランス</h2>
            <RadarChart data={todayReading.parameters} />
          </div>
        )}

        {/* 統計カード */}
        {userStats && (
          <div className="bg-white rounded-xl p-6 shadow-lg">
            <h2 className="text-xl font-semibold mb-4">統計情報</h2>
            <div className="space-y-4">
              <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                <span className="text-gray-600">総占い回数</span>
                <span className="text-2xl font-bold text-purple-600">
                  {userStats.totalReadings}回
                </span>
              </div>
              
              <div className="grid grid-cols-2 gap-3">
                <div className="p-3 bg-purple-50 rounded-lg">
                  <p className="text-xs text-gray-600">タロット</p>
                  <p className="text-lg font-semibold text-purple-600">
                    {userStats.tarotReadings || 0}回
                  </p>
                </div>
                <div className="p-3 bg-indigo-50 rounded-lg">
                  <p className="text-xs text-gray-600">手相</p>
                  <p className="text-lg font-semibold text-indigo-600">
                    {userStats.palmReadings || 0}回
                  </p>
                </div>
              </div>
              
              <div className="p-3 bg-yellow-50 rounded-lg">
                <p className="text-xs text-gray-600">連続占い日数</p>
                <p className="text-lg font-semibold text-yellow-600">
                  {userStats.currentStreak}日
                </p>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* 履歴グラフ */}
      <div className="grid md:grid-cols-2 gap-6">
        {/* 短期推移（タロット） */}
        <div className="bg-white rounded-xl p-6 shadow-lg">
          <h2 className="text-xl font-semibold mb-4">
            短期運勢推移（過去30日）
          </h2>
          <HistoryChart 
            readings={readingHistory.filter(r => r.readingType === 'daily-tarot')} 
          />
        </div>

        {/* 中長期推移（手相） */}
        <div className="bg-white rounded-xl p-6 shadow-lg">
          <h2 className="text-xl font-semibold mb-4">
            中長期運勢（手相履歴）
          </h2>
          {readingHistory.filter(r => r.readingType === 'palm').length > 0 ? (
            <HistoryChart 
              readings={readingHistory.filter(r => r.readingType === 'palm')} 
            />
          ) : (
            <div className="flex items-center justify-center h-64 text-gray-400">
              <div className="text-center">
                <Camera className="w-12 h-12 mx-auto mb-2 opacity-50" />
                <p>手相占いデータがありません</p>
                <p className="text-sm mt-1">手相占いを試してみましょう</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
